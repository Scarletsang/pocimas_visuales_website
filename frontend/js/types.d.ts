export type NodeId = string;
export type ScopeId = string;
export type HTMLContent = string;
/** A union type of the following:
 * 1. a normal website URL
 * 2. a relative path that grabs media from the server */
export type URL = string;

/**
 * The scope data in JSON format
 * @property **name** - the name/id of the scope.
 * @property **head** - the starting node of the scope.
 * @property **members** - all the members in the scope.
 */
export type ScopeData = {
  name: string,
  head : NodeId,
  members: Array<NodeId>
};

/**
 * The data of each node in JSON format
 * @property **id** - A unique ID of the node
 * @property **title** - Title of the node that will be shown in the navigation bar of the website
 * @property **structure** - A keyword describing how should the page be rendered. The structure of the {@link NodeRawData.data data property} changes vastly depending on this property.
 * @property **nextLessonBtnText** - The text of the button that directs the user to the next node (page).
 * @property **nextIds** - An array of possible nodes that this node can go to. The directed graph that the {@link NodeWalker} walks on is created from this property.
 * @property **html** - The unstructured data of the page that are in HTML format. This content is generated by a markdown parser in the backend.
 * @property **data** - The structured data that are needed by the page. The structure of this data depends on the {@link NodeRawData.structure structure property}.
 */
export type NodeRawData = {
  id: NodeId,
  title: string,
  structure: "home" | "info" | "cinema" | "resource" | "choice",
  nav?: "home" | "hide" | string,
  nextLessonBtnText?: string,
  nextIds?: Array<NodeId>,
  html?: HTMLContent,
  data?: HomePageData | ResourcePageData | ChoicePageData | CinemaPageData
};

type HomePageData = {
  startText: string,
  startId: NodeId,
  coverImage: URL
};

type ResourcePageData = Array<ResourceItemData>;
type ResourceItemData = VimeoResource | IframeResource | MediaResource;

type ChoicePageData = Array<ChoiceData>;
type ChoiceData = {
  id: NodeId,
  front: HTMLContent,
  back?: HTMLContent
};

type CinemaPageData = VimeoData | IframeData | StaticMediaData;

interface VimeoData {
  type: "vimeo"
  title: string
  id: Number
};

interface IframeData {
  type: "iframe"
  title: string
  url: URL
  iframeAllow?: String
};

interface StaticMediaData {
  type: "image" | "pdf"
  title: string
  url: URL
};

interface VimeoResource  extends VimeoData  {thumbnail?: URL}
interface IframeResource extends IframeData {thumbnail?: URL}
interface MediaResource  extends StaticMediaData  {thumbnail?: URL}